package Frames;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class NotesScreen extends javax.swing.JInternalFrame {

    private BufferedReader br;
    private BufferedWriter bw;
    private DefaultListModel<String> loreModel;
    private DefaultListModel<String> sessionModel;
    private DefaultListModel<String> npcModel;

    /**
     * Creates new form NotesFrame
     */
    public NotesScreen(){

        initComponents();
        loreModel = new DefaultListModel<>();
        sessionModel = new DefaultListModel<>();
        npcModel = new DefaultListModel<>();
        updateLoreList();
        updateSessionList();
        updateNPCList();
        notesPane.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JTabbedPane sourceTabbedPane = (JTabbedPane) e.getSource();
                int index = sourceTabbedPane.getSelectedIndex();
                switch (index) {
                    case 0:
                        updateLoreList();
                        break;
                    case 1:
                        updateSessionList();
                        break;
                    case 2:
                        updateNPCList();
                        break;
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notesPane = new javax.swing.JTabbedPane();
        SessionFiles = new javax.swing.JScrollPane();
        SessionList = new javax.swing.JList<>();
        NPCFiles = new javax.swing.JScrollPane();
        NPCList = new javax.swing.JList<>();
        LoreFiles = new javax.swing.JScrollPane();
        LoreList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        displayNote = new javax.swing.JEditorPane();
        removeFile = new javax.swing.JButton();
        addFile = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        notesPane.setBorder(new javax.swing.border.MatteBorder(null));

        SessionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        SessionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SessionListValueChanged(evt);
            }
        });
        SessionFiles.setViewportView(SessionList);

        notesPane.addTab("Session", SessionFiles);

        NPCList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        NPCList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                NPCListValueChanged(evt);
            }
        });
        NPCFiles.setViewportView(NPCList);

        notesPane.addTab("NPCs", NPCFiles);

        LoreList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LoreListValueChanged(evt);
            }
        });
        LoreFiles.setViewportView(LoreList);

        notesPane.addTab("Lore", LoreFiles);

        displayNote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                displayNoteKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(displayNote);

        removeFile.setText("Remove Selected File");
        removeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileActionPerformed(evt);
            }
        });

        addFile.setText("Add file..");
        addFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeFile)))
                .addGap(59, 59, 59)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addFile)
                            .addComponent(removeFile))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoreListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_LoreListValueChanged
        if (!evt.getValueIsAdjusting()) {
        String selectedFile = LoreList.getSelectedValue();
        if (selectedFile != null && !selectedFile.isEmpty()) {
            try {
                br = new BufferedReader(new FileReader("src/main/Java/Lore/" + selectedFile));
                String line;
                StringBuilder sb = new StringBuilder();
                while ((line = br.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                displayNote.setText(sb.toString());
                br.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            displayNote.setText("");
        }
    }
    }//GEN-LAST:event_LoreListValueChanged

    private void displayNoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayNoteKeyTyped
        System.out.println("Tpying");
        
        String packageName = null;
        
        if (notesPane.getSelectedIndex() == 0) {
            packageName = "Lore";
        } 
        
        else if (notesPane.getSelectedIndex() == 1) {
            packageName = "Session";
        } 
        
        else if (notesPane.getSelectedIndex() == 2) {
            packageName = "NPC";
        }

               
            
      
String selectedNote = null;
int selectedIndex = notesPane.getSelectedIndex();
if (selectedIndex != -1) {
    JList<String> selectedList = (JList<String>) ((JScrollPane) notesPane.getComponentAt(selectedIndex)).getViewport().getView();
    selectedNote = selectedList.getSelectedValue();
}
        if (selectedNote != null) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("src\\main\\Java\\" + packageName + "\\" + selectedNote))) {
                bw.write(displayNote.getText());
            } catch (IOException ex) {
                Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_displayNoteKeyTyped

    private void SessionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SessionListValueChanged
       if (!evt.getValueIsAdjusting()) {
            String selectedNote = SessionList.getSelectedValue();

    if (selectedNote != null) {
        try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\Session\\" + selectedNote))) {
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
            }
            displayNote.setText(sb.toString());
        } catch (IOException ex) {
            Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
    }//GEN-LAST:event_SessionListValueChanged

    private void NPCListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_NPCListValueChanged
        if (!evt.getValueIsAdjusting()) {
        String selectedNote = NPCList.getSelectedValue();

        if (selectedNote != null) {
            try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\NPC\\" + selectedNote))) {
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                }
                displayNote.setText(sb.toString());
            } catch (IOException ex) {
                Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    }//GEN-LAST:event_NPCListValueChanged

    private void removeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileActionPerformed
        int notesPaneIndex = notesPane.getSelectedIndex();
    JList<String> list;
    String listName;
    String packageName;
    switch (notesPaneIndex) {
        case 0:
            list = SessionList;
            listName = "SessionList";
            packageName = "Session\\";
            break;
        case 1:
            list = NPCList;
            listName = "NPCList";
            packageName = "NPC\\";
            break;
        case 2:
            list = LoreList;
            listName = "LoreList";
            packageName = "Lore\\";
            break;
        default:
            return;
    }
    int selectedIndex = list.getSelectedIndex();
    if (selectedIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a file to remove from the " + listName + ".", "No File Selected", JOptionPane.WARNING_MESSAGE);
        return;
    }
    String folderPath = "src\\main\\Java\\" + packageName;
    String fileName = list.getModel().getElementAt(selectedIndex);
    File fileToDelete = new File(folderPath + fileName);

    int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove the file \"" + fileName + "\" from the " + listName + "?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
    if (confirmation == JOptionPane.YES_OPTION) {
        if (!fileToDelete.delete()) {
            JOptionPane.showMessageDialog(this, "Failed to delete file \"" + fileName + "\" from the " + listName + ".", "Deletion Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultListModel<String> listModel = (DefaultListModel<String>) list.getModel();
            listModel.remove(selectedIndex);
        }
    }
    }//GEN-LAST:event_removeFileActionPerformed

    private void addFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileActionPerformed
        int notesPaneIndex = notesPane.getSelectedIndex();
    JList<String> list;
    String listName, packageName;
    switch (notesPaneIndex) {
        case 0:
            list = LoreList;
            listName = "Lore";
            packageName = "Lore\\";
            break;
        case 1:
            list = SessionList;
            listName = "Session";
            packageName = "Session\\";
            break;
        case 2:
            list = NPCList;
            listName = "NPC";
            packageName = "NPC\\";
            break;
        default:
            return;
    }

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Select a file to add to " + listName + "list");
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
    int choice = fileChooser.showOpenDialog(this);
    if (choice != JFileChooser.APPROVE_OPTION) {
        return;
    }
    File selectedFile = fileChooser.getSelectedFile();
    String fileName = selectedFile.getName();

    try {
        String packagePath = System.getProperty("user.dir") + File.separator + "src\\main\\Java\\" + File.separator + packageName;
        Path destPath = Paths.get(packagePath, fileName);
        Files.copy(selectedFile.toPath(), destPath, StandardCopyOption.REPLACE_EXISTING);
        DefaultListModel<String> listModel = (DefaultListModel<String>) list.getModel();
        listModel.addElement(fileName);
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Failed to add file \"" + fileName + "\" to the " + listName + ".", "Addition Error", JOptionPane.ERROR_MESSAGE);
    }

        
    }//GEN-LAST:event_addFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane LoreFiles;
    private javax.swing.JList<String> LoreList;
    private javax.swing.JScrollPane NPCFiles;
    private javax.swing.JList<String> NPCList;
    private javax.swing.JScrollPane SessionFiles;
    private javax.swing.JList<String> SessionList;
    private javax.swing.JButton addFile;
    private javax.swing.JEditorPane displayNote;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane notesPane;
    private javax.swing.JButton removeFile;
    // End of variables declaration//GEN-END:variables


private void updateLoreList() {
        loreModel.clear();
        File loreFolder = new File("src/main/Java/Lore");
        File[] loreFiles = loreFolder.listFiles();
        for (File loreFile : loreFiles) {
            if (loreFile.isFile() && loreFile.getName().endsWith(".txt")) {
                loreModel.addElement(loreFile.getName());
            }
        }
        LoreList.setModel(loreModel);
    }

    private void updateSessionList() {
        sessionModel.clear();
        File sessionFolder = new File("src/main/Java/Session");
        File[] sessionFiles = sessionFolder.listFiles();
        for (File sessionFile : sessionFiles) {
            if (sessionFile.isFile() && sessionFile.getName().endsWith(".txt")) {
                sessionModel.addElement(sessionFile.getName());
            }
        }
        SessionList.setModel(sessionModel);
    }

    private void updateNPCList() {
        npcModel.clear();
        File npcFolder = new File("src/main/Java/NPC");
        File[] npcFiles = npcFolder.listFiles();
        for (File npcFile : npcFiles) {
            if (npcFile.isFile() && npcFile.getName().endsWith(".txt")) {
                npcModel.addElement(npcFile.getName());
            }
        }
        NPCList.setModel(npcModel);
    }







}
