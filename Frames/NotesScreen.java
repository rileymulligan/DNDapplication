package Frames;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JViewport;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class NotesScreen extends javax.swing.JInternalFrame {

    private BufferedReader br;
    private BufferedWriter bw;

    /**
     * Creates new form NotesFrame
     */
    public NotesScreen(){

        initComponents();
DefaultListModel<String> loreModel = new DefaultListModel<>();
File loreFolder = new File("src/main/Java/Lore");
File[] loreFiles = loreFolder.listFiles();
for (File loreFile : loreFiles) {
    if (loreFile.isFile() && loreFile.getName().endsWith(".txt")) {
        loreModel.addElement(loreFile.getName());
    }
}
LoreList.setModel(loreModel);

DefaultListModel<String> sessionModel = new DefaultListModel<>();
File sessionFolder = new File("src/main/Java/Session");
File[] sessionFiles = sessionFolder.listFiles();
for (File sessionFile : sessionFiles) {
    if (sessionFile.isFile() && sessionFile.getName().endsWith(".txt")) {
        sessionModel.addElement(sessionFile.getName());
    }
}
SessionList.setModel(sessionModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notesPane = new javax.swing.JTabbedPane();
        LoreFiles = new javax.swing.JScrollPane();
        LoreList = new javax.swing.JList<>();
        SessionFiles = new javax.swing.JScrollPane();
        SessionList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        displayNote = new javax.swing.JEditorPane();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        notesPane.setBorder(new javax.swing.border.MatteBorder(null));

        LoreList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LoreListValueChanged(evt);
            }
        });
        LoreFiles.setViewportView(LoreList);

        notesPane.addTab("Lore", LoreFiles);

        SessionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        SessionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SessionListValueChanged(evt);
            }
        });
        SessionFiles.setViewportView(SessionList);

        notesPane.addTab("Session", SessionFiles);

        displayNote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                displayNoteKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(displayNote);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(469, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 430, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoreListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_LoreListValueChanged
        if (!evt.getValueIsAdjusting()) {
            String selectedNote = LoreList.getSelectedValue();

    if (selectedNote != null) {
        try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\Lore\\" + selectedNote))) {
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
            }
            displayNote.setText(sb.toString());
        } catch (IOException ex) {
            Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
    }//GEN-LAST:event_LoreListValueChanged

    private void displayNoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayNoteKeyTyped
        String packageName = null;
        
        if (notesPane.getSelectedIndex() == 0){
            packageName = "Lore";
        }
        else{
            packageName = "Session";
        }
        
        String selectedNote = ((JList<String>) ((JViewport) notesPane.getSelectedComponent()).getView()).getSelectedValue();

        if (selectedNote != null) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("src\\main\\Java\\" + packageName + "\\" + selectedNote))) {
                bw.write(displayNote.getText());
            } catch (IOException ex) {
                Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_displayNoteKeyTyped

    private void SessionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SessionListValueChanged
       if (!evt.getValueIsAdjusting()) {
            String selectedNote = SessionList.getSelectedValue();

    if (selectedNote != null) {
        try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\Session\\" + selectedNote))) {
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
            }
            displayNote.setText(sb.toString());
        } catch (IOException ex) {
            Logger.getLogger(NotesScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
    }//GEN-LAST:event_SessionListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane LoreFiles;
    private javax.swing.JList<String> LoreList;
    private javax.swing.JScrollPane SessionFiles;
    private javax.swing.JList<String> SessionList;
    private javax.swing.JEditorPane displayNote;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane notesPane;
    // End of variables declaration//GEN-END:variables
}
