package Frames;


import com.google.gson.Gson;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.EditorKit;
import javax.swing.text.html.HTMLEditorKit;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import javax.swing.JOptionPane;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class MonsterScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form MonsterScreen
     */
    public DefaultListModel<String> listModel;
    
    public MonsterScreen() throws FileNotFoundException {
        
        
        
         // Create a list model and add it to a JList
        listModel = new DefaultListModel<>();
        new JList<>(listModel);
        
        
        
        Gson gson = new Gson();
        Monster[] monsters = gson.fromJson(new FileReader("src\\main\\Java\\InternalData\\monsters.json"), Monster[].class);
        System.out.println("Done!");

            // Populate the list model with the names of the monsters
        for (Monster monster : monsters) {
            listModel.addElement(monster.getName());
        }

         initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        search4 = new javax.swing.JTextField();
        small4 = new javax.swing.JToggleButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList<>();
        huge4 = new javax.swing.JToggleButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        medium4 = new javax.swing.JToggleButton();
        large4 = new javax.swing.JToggleButton();
        jLabel29 = new javax.swing.JLabel();
        icon4 = new javax.swing.JLabel();
        minSpinner4 = new javax.swing.JSpinner();
        tiny4 = new javax.swing.JToggleButton();
        jLabel30 = new javax.swing.JLabel();
        maxSpinner4 = new javax.swing.JSpinner();
        gargantuan4 = new javax.swing.JToggleButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        imageShow = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        showMonster = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        addToActive = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel25.setText("Select a monster:");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setText("Name");

        search4.setForeground(new java.awt.Color(204, 204, 204));
        search4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search4ActionPerformed(evt);
            }
        });
        search4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search4KeyReleased(evt);
            }
        });

        small4.setSelected(true);
        small4.setText("Small");
        small4.setFocusable(false);
        small4.setRolloverEnabled(false);
        small4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                small4sizeStateChanged(evt);
            }
        });

        jList5.setModel(listModel);
        jList5.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jList5);

        huge4.setSelected(true);
        huge4.setText("Huge");
        huge4.setFocusable(false);
        huge4.setRolloverEnabled(false);
        huge4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                huge4sizeStateChanged(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel27.setText("Size");

        jLabel28.setText("Min ");

        medium4.setSelected(true);
        medium4.setText("Medium");
        medium4.setFocusable(false);
        medium4.setRolloverEnabled(false);
        medium4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                medium4sizeStateChanged(evt);
            }
        });

        large4.setSelected(true);
        large4.setText("Large");
        large4.setFocusable(false);
        large4.setRolloverEnabled(false);
        large4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                large4sizeStateChanged(evt);
            }
        });

        jLabel29.setText("Max");

        icon4.setBackground(new java.awt.Color(0, 0, 0));
        icon4.setText(" ");

        minSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSpinner4challengeFilter(evt);
            }
        });

        tiny4.setSelected(true);
        tiny4.setText("Tiny");
        tiny4.setFocusable(false);
        tiny4.setRolloverEnabled(false);
        tiny4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tiny4sizeStateChanged(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setText("Challenge Rating ");

        maxSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSpinner4challengeFilter(evt);
            }
        });

        gargantuan4.setSelected(true);
        gargantuan4.setText("Gargantuan");
        gargantuan4.setFocusable(false);
        gargantuan4.setRolloverEnabled(false);
        gargantuan4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gargantuan4sizeStateChanged(evt);
            }
        });

        jScrollPane7.setViewportView(imageShow);

        showMonster.setContentType("text/html\n"); // NOI18N
        jScrollPane6.setViewportView(showMonster);

        jLabel1.setText("If a monster is selected...");

        addToActive.setText("Add to active combat");
        addToActive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToActiveMouseClicked(evt);
            }
        });
        addToActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToActiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel29)
                                .addComponent(jLabel28))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(1, 1, 1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(minSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(maxSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(small4)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(medium4)
                                                .addGap(52, 52, 52)
                                                .addComponent(gargantuan4))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel26)
                                                .addGap(39, 39, 39)
                                                .addComponent(search4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel27)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tiny4)
                                                .addGap(89, 89, 89)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(huge4)
                                                    .addComponent(large4))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(46, 46, 46)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel25)
                                                .addGap(127, 127, 127))))))
                            .addComponent(addToActive))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1022, 1022, 1022)
                .addComponent(icon4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(jLabel27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(large4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(tiny4)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(small4)
                                        .addGap(18, 18, 18)
                                        .addComponent(medium4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(huge4)
                                        .addGap(18, 18, 18)
                                        .addComponent(gargantuan4)))
                                .addGap(44, 44, 44)
                                .addComponent(jLabel30))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(search4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel25))
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(minSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(maxSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(icon4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addToActive)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane6)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void search4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search4ActionPerformed

    private void search4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search4KeyReleased
        // TODO add your handling code here:
        String searchStr = search4.getText().toLowerCase();
        listModel.clear();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("src\\main\\Java\\InternalData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().toLowerCase().contains(searchStr)) {
                listModel.addElement(monster.getName());
            }
        }

    }//GEN-LAST:event_search4KeyReleased

    private void small4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_small4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_small4sizeStateChanged

    private void jList5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList5MouseClicked
        // TODO add your handling code here:

        String name = jList5.getSelectedValue();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("src\\main\\Java\\InternalData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().equals(name)) {
                
                String stats = "<html>" +
                "<b>Name:</b> " + monster.getName() + "<br>" +
                "<b>Meta:</b> " + monster.getMeta() + "<br>" +
                "<b>CR:</b> " + monster.getChallenge() + "<br>" +
                "<b>Armor Class:</b> " + monster.getArmorClass() + "<br>" +
                "<b>Hit Points:</b> " + monster.getHitPoints() + "<br>" +
                "<b>Speed:</b> " + monster.getSpeed() + "<br>" +
                "<b>STR:</b> " + monster.getStr() + monster.getStrMod() + "<br>" +
                "<b>DEX:</b> " + monster.getDex() + monster.getDexMod() + "<br>" +
                "<b>CON:</b> " + monster.getCon() + monster.getConMod() + "<br>" +
                "<b>INT:</b> " + monster.getIntStat() + monster.getIntMod() + "<br>" +
                "<b>WIS:</b> " + monster.getWis() + monster.getWisMod() + "<br>" +
                "<b>CHA:</b> " + monster.getCha() + monster.getChaMod() + "<br>" +
                "<b>Saving Throws:</b> " + monster.getSavingThrows() + "<br>" +
                "<b>Skills:</b> " + monster.getSkills() + "<br>" +
                "<b>Damage Immunities:</b> " + monster.getDamageImmunities() + "<br>" +
                "<b>Condition Immunities:</b> " + monster.getConditionImmunities() + "<br>" +
                "<b>Senses:</b> " + monster.getSenses() + "<br>" +
                "<b>Languages:</b> " + monster.getLanguages() + "<br>" +
                "<b>Traits:</b> " + monster.getTraits() + "<br>" +
                "<b>Actions:</b> " + monster.getActions() + "<br>" +
                "</html>";
                
               
               showMonster.setText("");
               showMonster.setEditable(false);
               HTMLEditorKit kit = new HTMLEditorKit();
               showMonster.setEditorKit(kit);
               showMonster.setOpaque(false);
               //showMonster.setLineWrap(true);
               //showMonster.setWrapStyleWord(true);
               showMonster.setText(stats);


                    // Display image
                
                    URL url = null;
                try {
                    url = new URL(monster.getImageUrl());
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                    BufferedImage image = null;
                try {
                    image = ImageIO.read(url);
                } catch (IOException ex) {
                    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                    ImageIcon icon = new ImageIcon(image);
                    Image scaledImage = image.getScaledInstance(400, 400, Image.SCALE_SMOOTH); // Set the width and height to 200 pixels
                    ImageIcon scaledIcon = new ImageIcon(scaledImage);
                    // Set the image label as the icon for the icon JLabel
                    this.imageShow.setIcon(scaledIcon);
                    
               

                
            }
        }

    }//GEN-LAST:event_jList5MouseClicked

    private void huge4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_huge4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_huge4sizeStateChanged

    private void medium4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medium4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_medium4sizeStateChanged

    private void large4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_large4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_large4sizeStateChanged

    private void minSpinner4challengeFilter(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSpinner4challengeFilter
        updateMonsterList();
    }//GEN-LAST:event_minSpinner4challengeFilter

    private void tiny4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiny4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_tiny4sizeStateChanged

    private void maxSpinner4challengeFilter(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSpinner4challengeFilter
        updateMonsterList();
    }//GEN-LAST:event_maxSpinner4challengeFilter

    private void gargantuan4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gargantuan4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_gargantuan4sizeStateChanged

    private void addToActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToActiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addToActiveActionPerformed

    private void addToActiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToActiveMouseClicked
        
        System.out.println("BAM");
String name = jList5.getSelectedValue();
String monsters_json_file_path = "src\\main\\Java\\InternalData\\monsters.json";
String masterJSON_file_path = "src\\main\\Java\\InternalData\\masterJSON.json";
// Read the monsters JSON file
String monstersJsonString = null;
try {
    monstersJsonString = new String(Files.readAllBytes(Paths.get(monsters_json_file_path)));
} catch (IOException ex) {
    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
}

// Check if the JSON string is an array
if (!monstersJsonString.trim().startsWith("[")) {
    System.err.println("Error: the monsters JSON file does not contain a valid JSON array.");
    return;
}

JSONArray monstersJson = new JSONArray(monstersJsonString);

// Get the selected monster from the JSON file
JSONObject selectedMonster = null;
for (int i = 0; i < monstersJson.length(); i++) {
    JSONObject monster = monstersJson.getJSONObject(i);
    if (monster.getString("name").equals(name)) {
        selectedMonster = monster;
        break;
    }
}

// Prompt the user to add a unique name for the monster
String monsterName;
do {
    monsterName = JOptionPane.showInputDialog("Enter a unique name for the monster:");
} while (monsterName == null || monsterName.isEmpty());

// Ask the user for the monster's HP
int monsterHP = Integer.parseInt(JOptionPane.showInputDialog("Enter the monster's HP:"));



// Create a JSON object for the new monster and add it to the master JSON file
String masterJsonString = null;
try {
    masterJsonString = new String(Files.readAllBytes(Paths.get(masterJSON_file_path)));
} catch (IOException ex) {
    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
}

// Check if the JSON string is an array
if (!masterJsonString.trim().startsWith("[")) {
    System.err.println("Error: the master JSON file does not contain a valid JSON array.");
    return;
}

JSONArray masterJson = new JSONArray(masterJsonString);
JSONObject newMonster = new JSONObject();
newMonster.put("name", monsterName);
newMonster.put("hp", monsterHP);
newMonster.put("Temphp", 0);

masterJson.put(newMonster);
try {
    Files.write(Paths.get(masterJSON_file_path), masterJson.toString().getBytes());
} catch (IOException ex) {
    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
}

// Print a confirmation message
System.out.println("Added " + monsterName + " with " + monsterHP + " HP to the master JSON file.");

    }//GEN-LAST:event_addToActiveMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToActive;
    private javax.swing.JToggleButton gargantuan4;
    private javax.swing.JToggleButton huge4;
    private javax.swing.JLabel icon4;
    private javax.swing.JLabel imageShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JList<String> jList5;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JToggleButton large4;
    private javax.swing.JSpinner maxSpinner4;
    private javax.swing.JToggleButton medium4;
    private javax.swing.JSpinner minSpinner4;
    private javax.swing.JTextField search4;
    private javax.swing.JEditorPane showMonster;
    private javax.swing.JToggleButton small4;
    private javax.swing.JToggleButton tiny4;
    // End of variables declaration//GEN-END:variables



public void updateMonsterList() {
        listModel.clear();

    Gson gson = new Gson();
    Monster[] monsters = null;

    try {
        monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
    }

    int minChallenge = (int) minSpinner4.getValue();
    int maxChallenge = (int) maxSpinner4.getValue();

    for (Monster monster : monsters) {
        double challengeValue = monster.getChallengeValue();
        if ((minChallenge == 0 && maxChallenge == 0) || (challengeValue >= minChallenge && challengeValue <= maxChallenge))
        {
            if (tiny4.isSelected() && monster.getMeta().toLowerCase().contains("tiny")) 
            {
                listModel.addElement(monster.getName());
            }
            if (small4.isSelected() && monster.getMeta().toLowerCase().contains("small")) 
            {
                listModel.addElement(monster.getName());
            }
            if (medium4.isSelected() && monster.getMeta().toLowerCase().contains("medium")) 
            {
                listModel.addElement(monster.getName());
            }
            if (large4.isSelected() && monster.getMeta().toLowerCase().contains("large")) 
            {
                listModel.addElement(monster.getName());
            }
            if (huge4.isSelected() && monster.getMeta().toLowerCase().contains("huge")) 
            {
                listModel.addElement(monster.getName());
            }
            if (gargantuan4.isSelected() && monster.getMeta().toLowerCase().contains("gargantuan")) 
            {
               listModel.addElement(monster.getName());
            }
        }
    }
}
}