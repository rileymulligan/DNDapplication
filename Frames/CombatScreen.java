package Frames;


import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import static java.nio.file.Files.list;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.MOVE;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class CombatScreen extends javax.swing.JInternalFrame {

    public DefaultListModel<String> model = new DefaultListModel<>();



    /**
     * Creates new form CombatFrame
     * @throws java.io.IOException
     */
    public CombatScreen() throws IOException {
       
        
        initComponents();
        refresh();

    
    

    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        activeCombatDisplay = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        healButton = new javax.swing.JButton();
        damageButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        addTempHP = new javax.swing.JButton();
        AddCustom = new javax.swing.JButton();
        AddPlayers = new javax.swing.JButton();

        activeCombatDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        activeCombatDisplay.setDragEnabled(true);
        activeCombatDisplay.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                activeCombatDisplayMouseDragged(evt);
            }
        });
        activeCombatDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                activeCombatDisplayMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                activeCombatDisplayMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(activeCombatDisplay);

        jLabel1.setText("Initiative!");

        healButton.setText("Heal Selected");

        damageButton.setText("Damage Selected");

        removeButton.setText("Remove Selected");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane1);

        jLabel2.setText("Value:");

        refreshButton.setText("Refresh");
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });

        addTempHP.setText("Add temp HP");

        AddCustom.setText("Add Custom");
        AddCustom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddCustomMouseClicked(evt);
            }
        });

        AddPlayers.setText("Quick Add Players");
        AddPlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddPlayersMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addGap(18, 18, 18)
                        .addComponent(AddCustom)
                        .addGap(18, 18, 18)
                        .addComponent(AddPlayers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(damageButton)
                            .addComponent(healButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(addTempHP))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton)
                    .addComponent(AddCustom)
                    .addComponent(AddPlayers)
                    .addComponent(removeButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(healButton)
                    .addComponent(addTempHP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(damageButton))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String masterJSON_file_path = "src\\main\\Java\\InternalData\\masterJSON.json";
String selectedValue = activeCombatDisplay.getSelectedValue();
        
System.out.println(selectedValue);

// Define the regular expression pattern to match text between <b> tags
Pattern pattern = Pattern.compile("<html><b>(.*?)</b>");

// Use a Matcher to search for matches in the input string
Matcher matcher = pattern.matcher(selectedValue);

if (matcher.find()) {
    String removalName = matcher.group(1);
    System.out.println(removalName);
    BufferedReader reader = null;
    try {
        // Read the contents of the masterJSON file into a String variable
        reader = new BufferedReader(new FileReader(masterJSON_file_path));
        StringBuilder stringBuilder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            stringBuilder.append(line);
        }
        String masterJSONString = stringBuilder.toString();
        reader.close();
        // Parse the masterJSON String into a JSONArray
        JSONArray masterJSON = new JSONArray(masterJSONString);
        // Find the object with the removalName key and remove it
        for (int i = 0; i < masterJSON.length(); i++) {
            JSONObject obj = masterJSON.getJSONObject(i);
            if (obj.getString("name").equals(removalName)) {
                masterJSON.remove(i);
                break;
            }
        }
        // Write the modified JSONArray back to the masterJSON file
        FileWriter writer = new FileWriter(masterJSON_file_path);
        writer.write(masterJSON.toString());
        writer.close();
    } catch (FileNotFoundException ex) {
        Logger.getLogger(CombatScreen.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(CombatScreen.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            if (reader != null) {
                reader.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(CombatScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    refresh();
}

    
        
        

    }//GEN-LAST:event_removeButtonActionPerformed

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        refresh();


    }//GEN-LAST:event_refreshButtonMouseClicked

    private void AddCustomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCustomMouseClicked
        try {
    String masterJSON_file_path = "src\\main\\Java\\InternalData\\masterJSON.json";
   
    // Read the MasterJSON file
    String masterJsonString = new String(Files.readAllBytes(Paths.get(masterJSON_file_path)));

    // Parse the JSON data as a JSON array
    JSONArray masterJson = new JSONArray(masterJsonString);

    // Get the player's name, HP, and Temp HP from user input
    String playerName = JOptionPane.showInputDialog("Enter the player's name:");
    int playerHP = Integer.parseInt(JOptionPane.showInputDialog("Enter the player's HP:"));
    int playerTempHP = Integer.parseInt(JOptionPane.showInputDialog("Enter the player's Temp HP:"));

    // Create a JSONObject for the new player
    JSONObject newPlayer = new JSONObject();
    newPlayer.put("name", playerName);
    newPlayer.put("hp", playerHP);
    newPlayer.put("Temphp", playerTempHP);

    // Add the new player to the JSONArray of monsters
    masterJson.put(newPlayer);

    // Write the updated JSONArray back to the masterJSON file
    Files.write(Paths.get(masterJSON_file_path), masterJson.toString().getBytes());

    
    refresh();
} catch (IOException | JSONException ex) {
    // Handle any exceptions that occur while reading or parsing the JSON data
}

    
    }//GEN-LAST:event_AddCustomMouseClicked

    private void AddPlayersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddPlayersMouseClicked
     addPlayers();
     refresh();
    }//GEN-LAST:event_AddPlayersMouseClicked

    private void activeCombatDisplayMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeCombatDisplayMouseDragged

    }//GEN-LAST:event_activeCombatDisplayMouseDragged

    private void activeCombatDisplayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeCombatDisplayMousePressed
    }//GEN-LAST:event_activeCombatDisplayMousePressed

    private void activeCombatDisplayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeCombatDisplayMouseReleased
    }//GEN-LAST:event_activeCombatDisplayMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCustom;
    private javax.swing.JButton AddPlayers;
    private javax.swing.JList<String> activeCombatDisplay;
    private javax.swing.JButton addTempHP;
    private javax.swing.JButton damageButton;
    private javax.swing.JButton healButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
public void refresh(){
    try {
        String masterJSON_file_path = "src\\main\\Java\\InternalData\\masterJSON.json";

        // Read the MasterJSON file
        String masterJsonString = new String(Files.readAllBytes(Paths.get(masterJSON_file_path)));

        // Parse the JSON data as a JSON array
        JSONArray masterJson = new JSONArray(masterJsonString);

        model.removeAllElements();
        
        // Iterate over the JSON array and add each monster to the list model
        for (int i = 0; i < masterJson.length(); i++) {
            JSONObject monster = masterJson.getJSONObject(i);
            String name = monster.getString("name");
            int hp = monster.getInt("hp");  
            int temphp = monster.getInt("Temphp");
            model.addElement("<html>" + "<b>" + name + "</b>" + "<br/><b>HP</b>: " + hp + "<br/><b>Temp HP:</b> " + temphp + "<br>~~~~~~~~~~~~~~~~~</html>");
        }

        // Set the list model on the JList
        activeCombatDisplay.setModel(model);


    } catch (IOException | JSONException ex) {
        // Handle any exceptions that occur while reading or parsing the JSON data
    }
    }

public void addPlayers() {
        
    
    try {
        String playersFilePath = "src/main/Java/InternalData/players.json";
        String masterFilePath = "src/main/Java/InternalData/masterJSON.json";
        String masterJsonString = new String(Files.readAllBytes(Paths.get(masterFilePath)));
        String playerJsonString = new String(Files.readAllBytes(Paths.get(playersFilePath)));

    // Parse the JSON data as JSON arrays
    JSONArray masterJson = new JSONArray(masterJsonString);
    JSONArray playerJson = new JSONArray(playerJsonString);

    // Add all elements from playerJson to masterJson
    for (int i = 0; i < playerJson.length(); i++) {
        masterJson.put(playerJson.getJSONObject(i));
    }

    // Update masterJSON.json file with the new data
    FileWriter fileWriter = new FileWriter(masterFilePath);
    fileWriter.write(masterJson.toString());
    fileWriter.close();

    // Clear the list model
    model.removeAllElements();

    // Iterate over the updated JSON array and add each element to the list model
    for (int i = 0; i < masterJson.length(); i++) {
        JSONObject element = masterJson.getJSONObject(i);
        String name = element.getString("name");
        int hp = element.getInt("hp");
        int temphp = element.getInt("Temphp");
        model.addElement("<html>" + "<b>" + name + "</b>" + "<br/><b>HP</b>: " + hp + "<br/><b>Temp HP:</b> " + temphp + "<br>~~~~~~~~~~~~~~~~~</html>");
        System.out.println(name + "Added!");
    }

    // Set the list model on the JList
    activeCombatDisplay.setModel(model);
    refresh();


}       catch (IOException ex) {
            Logger.getLogger(CombatScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}