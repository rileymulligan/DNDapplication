
import com.google.gson.Gson;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class MonsterScreen extends javax.swing.JFrame {

    /**
     * Creates new form MonsterScreen
     */
    
    private static final long serialVersionUID = 1L;
    private DefaultListModel<String> listModel;

    public MonsterScreen() throws FileNotFoundException {
        
        
        
        // Create a list model and add it to a JList
        listModel = new DefaultListModel<>();
        new JList<>(listModel);
        
        Gson gson = new Gson();
        Monster[] monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
        System.out.println("Done!");

            // Populate the list model with the names of the monsters
        for (Monster monster : monsters) {
            listModel.addElement(monster.getName());
        }

         initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gargantuan = new javax.swing.JToggleButton();
        large = new javax.swing.JToggleButton();
        huge = new javax.swing.JToggleButton();
        medium = new javax.swing.JToggleButton();
        small = new javax.swing.JToggleButton();
        tiny = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        maxSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        minSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        icon = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        selectedMonster = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gargantuan.setSelected(true);
        gargantuan.setText("Gargantuan");
        gargantuan.setFocusable(false);
        gargantuan.setRolloverEnabled(false);
        gargantuan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        large.setSelected(true);
        large.setText("Large");
        large.setFocusable(false);
        large.setRolloverEnabled(false);
        large.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        huge.setSelected(true);
        huge.setText("Huge");
        huge.setFocusable(false);
        huge.setRolloverEnabled(false);
        huge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        medium.setSelected(true);
        medium.setText("Medium");
        medium.setFocusable(false);
        medium.setRolloverEnabled(false);
        medium.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        small.setSelected(true);
        small.setText("Small");
        small.setFocusable(false);
        small.setRolloverEnabled(false);
        small.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        tiny.setSelected(true);
        tiny.setText("Tiny");
        tiny.setFocusable(false);
        tiny.setRolloverEnabled(false);
        tiny.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sizeStateChanged(evt);
            }
        });

        jLabel6.setText("Max ");

        maxSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                challengeFilter(evt);
            }
        });

        jLabel5.setText("Min");

        minSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                challengeFilter(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Challenge Rating ");

        icon.setBackground(new java.awt.Color(0, 0, 0));
        icon.setText(" ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Size");

        search.setForeground(new java.awt.Color(204, 204, 204));
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        selectedMonster.setText("                                             Select a monster...");
        selectedMonster.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Name");

        jLabel2.setText("Selected");

        jList1.setModel(listModel);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tiny)
                        .addGap(94, 94, 94)
                        .addComponent(jLabel4)
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medium)
                            .addComponent(huge)
                            .addComponent(large))
                        .addGap(189, 189, 189))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(242, 242, 242)
                                .addComponent(selectedMonster))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addComponent(small))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(271, 271, 271)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(gargantuan))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(320, 320, 320)
                                .addComponent(icon))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addComponent(jLabel3)))
                        .addGap(307, 307, 307))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(141, 141, 141)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 4158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 4158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 4158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 4158, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(selectedMonster)
                        .addGap(390, 390, 390)
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel6)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(icon)
                        .addGap(18, 18, 18)
                        .addComponent(small)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(22, 22, 22))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(gargantuan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)))
                        .addComponent(tiny)
                        .addGap(113, 113, 113))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jLabel2)
                        .addGap(443, 443, 443)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(huge)
                    .addComponent(large)
                    .addComponent(medium))
                .addGap(285, 287, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 1224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 1224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 1224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
       String name = jList1.getSelectedValue();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().equals(name)) {
                String stats = "<html>" +
                "<b>Name:</b> " + monster.getName() + "<br>" +
                "<b>Meta:</b> " + monster.getMeta() + "<br>" +
                "<b>CR:</b> " + monster.getChallenge() + "<br>" +
                "<b>Armor Class:</b> " + monster.getArmorClass() + "<br>" +
                "<b>Hit Points:</b> " + monster.getHitPoints() + "<br>" +
                "<b>Speed:</b> " + monster.getSpeed() + "<br>" +
                 "<b>STR:</b> " + monster.getStr() + monster.getStrMod() + "<br>" +
                "<b>DEX:</b> " + monster.getDex() + monster.getDexMod() + "<br>" +
                "<b>CON:</b> " + monster.getCon() + monster.getConMod() + "<br>" +
                "<b>INT:</b> " + monster.getIntStat() + monster.getIntMod() + "<br>" +
                "<b>WIS:</b> " + monster.getWis() + monster.getWisMod() + "<br>" +
                "<b>CHA:</b> " + monster.getCha() + monster.getChaMod() + "<br>" +
                "<b>Saving Throws:</b> " + monster.getSavingThrows() + "<br>" +
                "<b>Skills:</b> " + monster.getSkills() + "<br>" +
                "<b>Damage Immunities:</b> " + monster.getDamageImmunities() + "<br>" +
                "<b>Condition Immunities:</b> " + monster.getConditionImmunities() + "<br>" +
                "<b>Senses:</b> " + monster.getSenses() + "<br>" +
                "<b>Languages:</b> " + monster.getLanguages() + "<br>" +
                "<b>Traits:</b> " + monster.getTraits() + "<br>" +
                "<b>Actions:</b> " + monster.getActions() + "<br>" +
                "</html>";
                
                

selectedMonster.setText(stats);
                 // Display image
            try {
                URL url = new URL(monster.getImageUrl());
                BufferedImage image = ImageIO.read(url);
                ImageIcon icon = new ImageIcon(image);
                Image scaledImage = image.getScaledInstance(400, 400, Image.SCALE_SMOOTH); // Set the width and height to 200 pixels
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                // Set the image label as the icon for the icon JLabel
                this.icon.setIcon(scaledIcon);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            break;
        }
    }

    }//GEN-LAST:event_jList1MouseClicked

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:
        String searchStr = search.getText().toLowerCase();
        listModel.clear();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().toLowerCase().contains(searchStr)) {
                listModel.addElement(monster.getName());
            }
        }
    
    }//GEN-LAST:event_searchKeyReleased

    private void sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_sizeStateChanged

    private void challengeFilter(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_challengeFilter
        updateMonsterList();
    }//GEN-LAST:event_challengeFilter

public void updateMonsterList() {
        listModel.clear();

    Gson gson = new Gson();
    Monster[] monsters = null;

    try {
        monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
    }

    int minChallenge = (int) minSpinner.getValue();
    int maxChallenge = (int) maxSpinner.getValue();

    for (Monster monster : monsters) {
        double challengeValue = monster.getChallengeValue();
        if ((minChallenge == 0 && maxChallenge == 0) || (challengeValue >= minChallenge && challengeValue <= maxChallenge))
        {
            if (tiny.isSelected() && monster.getMeta().toLowerCase().contains("tiny")) 
            {
                listModel.addElement(monster.getName());
            }
            if (small.isSelected() && monster.getMeta().toLowerCase().contains("small")) 
            {
                listModel.addElement(monster.getName());
            }
            if (medium.isSelected() && monster.getMeta().toLowerCase().contains("medium")) 
            {
                listModel.addElement(monster.getName());
            }
            if (large.isSelected() && monster.getMeta().toLowerCase().contains("large")) 
            {
                listModel.addElement(monster.getName());
            }
            if (huge.isSelected() && monster.getMeta().toLowerCase().contains("huge")) 
            {
                listModel.addElement(monster.getName());
            }
            if (gargantuan.isSelected() && monster.getMeta().toLowerCase().contains("gargantuan")) 
            {
               listModel.addElement(monster.getName());
            }
        }
    }
}
    
     
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonsterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonsterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonsterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonsterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MonsterScreen().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton gargantuan;
    private javax.swing.JToggleButton huge;
    private javax.swing.JLabel icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton large;
    private javax.swing.JSpinner maxSpinner;
    private javax.swing.JToggleButton medium;
    private javax.swing.JSpinner minSpinner;
    private javax.swing.JTextField search;
    private javax.swing.JLabel selectedMonster;
    private javax.swing.JToggleButton small;
    private javax.swing.JToggleButton tiny;
    // End of variables declaration//GEN-END:variables
}
