package Frames;


import com.google.gson.Gson;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.text.html.HTMLEditorKit;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class MonsterScreen extends javax.swing.JInternalFrame implements Extendable {

    /**
     * Creates new form MonsterScreen
     */
    public DefaultListModel<String> listModel;
    private final JDesktopPane desktopPane;
    
    public MonsterScreen(JDesktopPane desktopPane) throws FileNotFoundException {
        
        this.desktopPane = desktopPane;

        
         // Create a list model and add it to a JList
        listModel = new DefaultListModel<>();
        new JList<>(listModel);
        
        
        
        Gson gson = new Gson();
        Monster[] monsters = gson.fromJson(new FileReader("classes/InternalData/monsters.json"), Monster[].class);
        System.out.println("Done!");

            // Populate the list model with the names of the monsters
        for (Monster monster : monsters) {
            listModel.addElement(monster.getName());
        }

         initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        search4 = new javax.swing.JTextField();
        small4 = new javax.swing.JToggleButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList<>();
        huge4 = new javax.swing.JToggleButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        medium4 = new javax.swing.JToggleButton();
        large4 = new javax.swing.JToggleButton();
        jLabel29 = new javax.swing.JLabel();
        icon4 = new javax.swing.JLabel();
        minSpinner4 = new javax.swing.JSpinner();
        tiny4 = new javax.swing.JToggleButton();
        jLabel30 = new javax.swing.JLabel();
        maxSpinner4 = new javax.swing.JSpinner();
        gargantuan4 = new javax.swing.JToggleButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        imageShow = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        showMonster = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        extendButton = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(1580, 767));

        jLabel25.setText("Select a monster:");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setText("Name");

        search4.setForeground(new java.awt.Color(204, 204, 204));
        search4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search4ActionPerformed(evt);
            }
        });
        search4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search4KeyReleased(evt);
            }
        });

        small4.setSelected(true);
        small4.setText("Small");
        small4.setFocusable(false);
        small4.setRolloverEnabled(false);
        small4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                small4sizeStateChanged(evt);
            }
        });

        jList5.setModel(listModel);
        jList5.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jList5);

        huge4.setSelected(true);
        huge4.setText("Huge");
        huge4.setFocusable(false);
        huge4.setRolloverEnabled(false);
        huge4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                huge4sizeStateChanged(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel27.setText("Size");

        jLabel28.setText("Min ");

        medium4.setSelected(true);
        medium4.setText("Medium");
        medium4.setFocusable(false);
        medium4.setRolloverEnabled(false);
        medium4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                medium4sizeStateChanged(evt);
            }
        });

        large4.setSelected(true);
        large4.setText("Large");
        large4.setFocusable(false);
        large4.setRolloverEnabled(false);
        large4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                large4sizeStateChanged(evt);
            }
        });

        jLabel29.setText("Max");

        icon4.setBackground(new java.awt.Color(0, 0, 0));
        icon4.setText(" ");

        minSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSpinner4challengeFilter(evt);
            }
        });

        tiny4.setSelected(true);
        tiny4.setText("Tiny");
        tiny4.setFocusable(false);
        tiny4.setRolloverEnabled(false);
        tiny4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tiny4sizeStateChanged(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setText("Challenge Rating ");

        maxSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSpinner4challengeFilter(evt);
            }
        });

        gargantuan4.setSelected(true);
        gargantuan4.setText("Gargantuan");
        gargantuan4.setFocusable(false);
        gargantuan4.setRolloverEnabled(false);
        gargantuan4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gargantuan4sizeStateChanged(evt);
            }
        });

        jScrollPane7.setViewportView(imageShow);

        jScrollPane6.setAlignmentX(0.0F);
        jScrollPane6.setAlignmentY(0.0F);

        showMonster.setEditable(false);
        showMonster.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        showMonster.setContentType("text/html\n"); // NOI18N
        showMonster.setAutoscrolls(false);
        jScrollPane6.setViewportView(showMonster);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Filters");

        extendButton.setText("Extend Monster Stats to new screen");
        extendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel27)
                                            .addComponent(jLabel26))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tiny4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(large4))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(search4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(small4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(huge4))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(medium4)
                                        .addGap(18, 18, 18)
                                        .addComponent(gargantuan4))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel30)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel28))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addGap(127, 127, 127))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(extendButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253)
                .addComponent(icon4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(search4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel27)
                                .addGap(2, 2, 2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tiny4)
                                    .addComponent(large4))))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(small4)
                            .addComponent(huge4))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medium4)
                            .addComponent(gargantuan4))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel30)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(minSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel25)
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel29)
                        .addComponent(maxSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(391, 391, 391)
                .addComponent(icon4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane6)
            .addGroup(layout.createSequentialGroup()
                .addComponent(extendButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void search4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search4ActionPerformed

    /**

    Invoked when a key is released in the search4 text field.
    This method retrieves a search string from the search4 text field and performs a search on a list of Monsters by comparing each Monster's name to the search string. If a Monster's name contains the search string, its name is added to the listModel object. The method then updates the GUI list view with the filtered results.
    @param evt the KeyEvent object representing the key release event
    */
    
    private void search4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search4KeyReleased
        // TODO add your handling code here:
        String searchStr = search4.getText().toLowerCase();
        listModel.clear();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("classes\\InternalData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().toLowerCase().contains(searchStr)) {
                listModel.addElement(monster.getName());
            }
        }

    }//GEN-LAST:event_search4KeyReleased

    private void small4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_small4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_small4sizeStateChanged

    
    /**

    Invoked when the user clicks on an item in the jList5 list view.
    This method retrieves the name of the Monster that was clicked and retrieves its stats from a JSON file. It then generates an HTML-formatted string containing the Monster's stats, traits, and actions. The method displays the string in the showMonster text field using an HTMLEditorKit. It also loads the Monster's image from a URL and displays it in the imageShow JLabel.
    @param evt the MouseEvent object representing the mouse click event
    */
    private void jList5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList5MouseClicked
        // TODO add your handling code here:

        String name = jList5.getSelectedValue();
        Gson gson = new Gson();
        Monster[] monsters = null;
        try {
            monsters = gson.fromJson(new FileReader("classes\\InternalData\\monsters.json"), Monster[].class);
        } catch (FileNotFoundException ex) {
            // Auto generated exception
            Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Monster monster : monsters) {
            if (monster.getName().equals(name)) {
                
                String stats = "<html>" +
        "<h1>" + monster.getName() + "</h1>" +
        "<h3>" + monster.getMeta() + "</h3>" +
        "<b>Challenge Rating:</b> " + monster.getChallenge() + "<br>" +
        "<b>Armor Class:</b> " + monster.getArmorClass() + "<br>" +
        "<b>Hit Points:</b> " + monster.getHitPoints() + "<br>" +
        "<b>Speed:</b> " + monster.getSpeed() + "<br><br>" +
        "<b>STR:</b> " + monster.getStr() + "  " + monster.getStrMod() + "<br>" +
        "<b>DEX:</b> " + monster.getDex() + " " + monster.getDexMod() + "<br>" +
        "<b>CON:</b> " + monster.getCon() + " " + monster.getConMod() + "<br>" +
        "<b>INT:</b> " + monster.getIntStat() + " " + monster.getIntMod() + "<br>" +
        "<b>WIS:</b> " + monster.getWis() + " " + monster.getWisMod() + "<br>" +
        "<b>CHA:</b> " + monster.getCha() + " " + monster.getChaMod() + "<br><br>" +
        "<b>Saving Throws:</b> " + monster.getSavingThrows() + "<br>" +
        "<b>Skills:</b> " + monster.getSkills() + "<br>" +
        "<b>Damage Immunities:</b> " + monster.getDamageImmunities() + "<br>" +
        "<b>Condition Immunities:</b> " + monster.getConditionImmunities() + "<br>" +
        "<b>Senses:</b> " + monster.getSenses() + "<br>" +
        "<b>Languages:</b> " + monster.getLanguages() + "<br><br>" +
        "<h2>Traits</h2>" + monster.getTraits() + "<br><br>" +
        "<h2>Actions</h2>" + monster.getActions() + "<br>" +
        "</html>";
                
               
               showMonster.setText("");
               showMonster.setEditable(false);
               HTMLEditorKit kit = new HTMLEditorKit();
               showMonster.setEditorKit(kit);
               showMonster.setOpaque(false);
               //showMonster.setLineWrap(true);
               //showMonster.setWrapStyleWord(true);
               showMonster.setText(stats);


                    // Display image
                    URL url = null;
                try {
                    url = new URL(monster.getImageUrl());
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                    BufferedImage image = null;
                try {
                    image = ImageIO.read(url);
                } catch (IOException ex) {
                    Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
                    ImageIcon icon = new ImageIcon(image);
                    Image scaledImage = image.getScaledInstance(400, 400, Image.SCALE_SMOOTH); // Set the width and height to 200 pixels
                    ImageIcon scaledIcon = new ImageIcon(scaledImage);
                    // Set the image label as the icon for the icon JLabel
                    this.imageShow.setIcon(scaledIcon);
                    
            }
        }

    }//GEN-LAST:event_jList5MouseClicked

    private void huge4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_huge4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_huge4sizeStateChanged

    private void medium4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medium4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_medium4sizeStateChanged

    private void large4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_large4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_large4sizeStateChanged

    private void tiny4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiny4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_tiny4sizeStateChanged

    private void gargantuan4sizeStateChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gargantuan4sizeStateChanged
        updateMonsterList();
    }//GEN-LAST:event_gargantuan4sizeStateChanged

    private void maxSpinner4challengeFilter(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSpinner4challengeFilter
        updateMonsterList();
    }//GEN-LAST:event_maxSpinner4challengeFilter

    private void minSpinner4challengeFilter(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSpinner4challengeFilter
        updateMonsterList();
    }//GEN-LAST:event_minSpinner4challengeFilter

    
    /**

    Creates a new internal frame with HTML content when the "extend" button is clicked.
    This method creates a new JEditorPane object to display the HTML content of the monster stats,
    sets its content type to HTML, makes it read-only, and then passes it to a new instance of the Extendable
    class to create a new internal frame with the JEditorPane as its content. The new internal frame is added
    to the desktop pane.
    @param evt an ActionEvent representing the "extend" button being clicked
    */
    private void extendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extendButtonActionPerformed
        JEditorPane monsterStats = new JEditorPane();
    monsterStats.setContentType("text/html"); // Set the content type to HTML
    monsterStats.setText(showMonster.getText()); // Add the HTML content
    
    monsterStats.setEditable(false); // Make the editor pane read-only
    Extendable extendable = new Extendable() {};
    extendable.createNewInternalFrameHTML(monsterStats, desktopPane); // Pass the desktop pane object
    }//GEN-LAST:event_extendButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton extendButton;
    private javax.swing.JToggleButton gargantuan4;
    private javax.swing.JToggleButton huge4;
    private javax.swing.JLabel icon4;
    private javax.swing.JLabel imageShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JList<String> jList5;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JToggleButton large4;
    private javax.swing.JSpinner maxSpinner4;
    private javax.swing.JToggleButton medium4;
    private javax.swing.JSpinner minSpinner4;
    private javax.swing.JTextField search4;
    private javax.swing.JEditorPane showMonster;
    private javax.swing.JToggleButton small4;
    private javax.swing.JToggleButton tiny4;
    // End of variables declaration//GEN-END:variables


    
   /**

Updates the monster list based on the selected criteria of minimum and maximum challenge values,
as well as size categories specified by the user. Retrieves the data from a JSON file and populates
a list model with monster names that meet the specified criteria.
*/

public void updateMonsterList() {
    // clear the model
    listModel.clear();

    Gson gson = new Gson();
    Monster[] monsters = null;
    
    //read in the monsters
    try {
        monsters = gson.fromJson(new FileReader("C:\\Users\\straf\\Desktop\\MonsterData\\monsters.json"), Monster[].class);
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MonsterScreen.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    // get the CR spinner value
    int minChallenge = (int) minSpinner4.getValue();
    int maxChallenge = (int) maxSpinner4.getValue();
    
    //apply the filters
    for (Monster monster : monsters) {
        double challengeValue = monster.getChallengeValue();
        if ((minChallenge == 0 && maxChallenge == 0) || (challengeValue >= minChallenge && challengeValue <= maxChallenge))
        {
            if (tiny4.isSelected() && monster.getMeta().toLowerCase().contains("tiny")) 
            {
                listModel.addElement(monster.getName());
            }
            if (small4.isSelected() && monster.getMeta().toLowerCase().contains("small")) 
            {
                listModel.addElement(monster.getName());
            }
            if (medium4.isSelected() && monster.getMeta().toLowerCase().contains("medium")) 
            {
                listModel.addElement(monster.getName());
            }
            if (large4.isSelected() && monster.getMeta().toLowerCase().contains("large")) 
            {
                listModel.addElement(monster.getName());
            }
            if (huge4.isSelected() && monster.getMeta().toLowerCase().contains("huge")) 
            {
                listModel.addElement(monster.getName());
            }
            if (gargantuan4.isSelected() && monster.getMeta().toLowerCase().contains("gargantuan")) 
            {
               listModel.addElement(monster.getName());
            }
        }
    }
}
}