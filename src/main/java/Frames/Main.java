package Frames;


import com.google.gson.Gson;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import org.json.simple.parser.ParseException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author straf
 */
public class Main extends javax.swing.JFrame{

        /**
     * Creates new form Main
     */
    
    private DefaultListModel<String> listModel;
    public DefaultListModel<String> spellListModel;
    
    public MonsterScreen MonsterScreen;
    public NotesScreen NotesScreen;
    public NPCScreen npcScreen;
    public CombatScreen combatScreen;
    public DiceRollerScreen diceRollerScreen;
    public SpellsScreen SpellsScreen;
    
    
    
    
    public Main() throws FileNotFoundException {
        listModel = new DefaultListModel<>();
        loadSpells();
        
        
        Gson gson = new Gson();
        Monster[] monsters = gson.fromJson(new FileReader("classes/InternalData/monsters.json"), Monster[].class);
        System.out.println("Done!");

            // Populate the list model with the names of the monsters
        for (Monster monster : monsters) {
            listModel.addElement(monster.getName());
        }
         initComponents();
         
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Main = new javax.swing.JPanel();
        desktopPane = new javax.swing.JDesktopPane();
        notesToggle = new javax.swing.JToggleButton();
        monsterToggle = new javax.swing.JToggleButton();
        npcToggle = new javax.swing.JToggleButton();
        combatToggle = new javax.swing.JToggleButton();
        exitButton = new javax.swing.JButton();
        diceRollToggle = new javax.swing.JToggleButton();
        spellsToggle = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DND Application");

        Main.setBackground(new java.awt.Color(255, 204, 204));

        desktopPane.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2471, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1661, Short.MAX_VALUE)
        );

        notesToggle.setText("Notes");
        notesToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        notesToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        notesToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                notesToggleItemStateChanged(evt);
            }
        });
        notesToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notesToggleMouseClicked(evt);
            }
        });
        notesToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesToggleActionPerformed(evt);
            }
        });

        monsterToggle.setText("Monsters");
        monsterToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        monsterToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        monsterToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monsterToggleItemStateChanged(evt);
            }
        });
        monsterToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monsterToggleActionPerformed(evt);
            }
        });

        npcToggle.setText("NPC");
        npcToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        npcToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        npcToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                npcToggleItemStateChanged(evt);
            }
        });
        npcToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                npcToggleActionPerformed(evt);
            }
        });

        combatToggle.setText("Combat");
        combatToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        combatToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        combatToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combatToggleItemStateChanged(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(255, 102, 102));
        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        diceRollToggle.setText("Dice Roll");
        diceRollToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        diceRollToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        diceRollToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                diceRollToggleItemStateChanged(evt);
            }
        });
        diceRollToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diceRollToggleActionPerformed(evt);
            }
        });

        spellsToggle.setText("Spells");
        spellsToggle.setMaximumSize(new java.awt.Dimension(64, 64));
        spellsToggle.setMinimumSize(new java.awt.Dimension(64, 64));
        spellsToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                spellsToggleItemStateChanged(evt);
            }
        });
        spellsToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spellsToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainLayout = new javax.swing.GroupLayout(Main);
        Main.setLayout(MainLayout);
        MainLayout.setHorizontalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainLayout.createSequentialGroup()
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notesToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monsterToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(npcToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combatToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diceRollToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spellsToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MainLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(exitButton)))
                .addGap(40, 40, 40)
                .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainLayout.setVerticalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(notesToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(monsterToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(npcToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(combatToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(diceRollToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(spellsToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(desktopPane))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void notesToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesToggleActionPerformed
 
    }//GEN-LAST:event_notesToggleActionPerformed

    private void monsterToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monsterToggleActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_monsterToggleActionPerformed

    private void notesToggleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notesToggleMouseClicked
   
    }//GEN-LAST:event_notesToggleMouseClicked

    private void monsterToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monsterToggleItemStateChanged
        if (MonsterScreen == null) {
            try {
                MonsterScreen = new MonsterScreen(desktopPane); 
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (monsterToggle.isSelected()) {
            desktopPane.add(MonsterScreen);
            MonsterScreen.setVisible(true);
            desktopPane.repaint();

        } else {
            desktopPane.remove(MonsterScreen);
            MonsterScreen.setVisible(false);
            desktopPane.repaint();
        }
        
        
    }//GEN-LAST:event_monsterToggleItemStateChanged

    private void notesToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_notesToggleItemStateChanged
    
        
        if (NotesScreen == null) {
            NotesScreen = new NotesScreen(desktopPane);
        }

        if (notesToggle.isSelected()) {
            desktopPane.add(NotesScreen);
            NotesScreen.setVisible(true);
            desktopPane.repaint();

        } else {
            desktopPane.remove(NotesScreen);
            NotesScreen.setVisible(false);
            desktopPane.repaint();
        }
    }//GEN-LAST:event_notesToggleItemStateChanged

    private void npcToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_npcToggleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_npcToggleActionPerformed

    private void npcToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_npcToggleItemStateChanged
        
        if (npcScreen == null) {
            npcScreen = new NPCScreen(desktopPane);
        }
        if (npcToggle.isSelected()) {
            desktopPane.add(npcScreen);
            npcScreen.setVisible(true);
            desktopPane.repaint();
        } 
        else {
            desktopPane.remove(npcScreen);
            npcScreen.setVisible(false);
            desktopPane.repaint();
        }
    }//GEN-LAST:event_npcToggleItemStateChanged

    private void combatToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combatToggleItemStateChanged
        if (combatScreen == null) {
            try {
                combatScreen = new CombatScreen();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (combatToggle.isSelected()) {
            desktopPane.add(combatScreen);
            combatScreen.setVisible(true);
            desktopPane.repaint();
        } 
        else {
            desktopPane.remove(combatScreen);
            combatScreen.setVisible(false);
            desktopPane.repaint();
        }    
    }//GEN-LAST:event_combatToggleItemStateChanged

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void diceRollToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_diceRollToggleItemStateChanged
       if (diceRollerScreen == null) {
           diceRollerScreen = new DiceRollerScreen();
    }
    if (diceRollToggle.isSelected()) {
        desktopPane.add(diceRollerScreen);
        diceRollerScreen.setVisible(true);
        desktopPane.repaint();
    } 
    else {
        desktopPane.remove(diceRollerScreen);
        diceRollerScreen.setVisible(false);
        desktopPane.repaint();
    }    
    }//GEN-LAST:event_diceRollToggleItemStateChanged

    private void diceRollToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diceRollToggleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diceRollToggleActionPerformed

    private void spellsToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_spellsToggleItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_spellsToggleItemStateChanged

    private void spellsToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spellsToggleActionPerformed
        if (SpellsScreen == null) {
            
            try {
                SpellsScreen = new SpellsScreen(desktopPane);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
    }
    if (spellsToggle.isSelected()) {
        desktopPane.add(SpellsScreen);
        SpellsScreen.setVisible(true);
        desktopPane.repaint();
    } 
    else {
        desktopPane.remove(SpellsScreen);
        SpellsScreen.setVisible(false);
        desktopPane.repaint();
    }    
    }//GEN-LAST:event_spellsToggleActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws javax.swing.UnsupportedLookAndFeelException
     * @throws java.io.FileNotFoundException
     * @throws java.lang.IllegalAccessException
     * @throws java.lang.InstantiationException
     */
    public static void main(String args[]) throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException, FileNotFoundException {
       
            // Iterate through the available look and feel options to find Nimbus
        for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                // Set Nimbus as the look and feel
                UIManager.setLookAndFeel(info.getClassName());
                break;
            }
    
    
        // Set the size of the main screen to be the same as the screen size
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Main main = new Main();

        main.setBounds(0, 0, (int) (screenSize.width * 0.8), (int) (screenSize.height * .8));
        main.setResizable(true); // disable resizing

        // Set the main screen to be full screen
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice device = env.getDefaultScreenDevice();


        // Listen for the Escape key to exit full-screen mode and dispose of the window
        main.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    device.setFullScreenWindow(null);
                    main.dispose();
                }
            }
        });

        // Set the close operation to exit the application
        main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Display the main form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main.setVisible(true);
            }
        });
    }
}

    



    
    
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Main;
    private javax.swing.JToggleButton combatToggle;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JToggleButton diceRollToggle;
    private javax.swing.JButton exitButton;
    private javax.swing.JToggleButton monsterToggle;
    private javax.swing.JToggleButton notesToggle;
    private javax.swing.JToggleButton npcToggle;
    private javax.swing.JToggleButton spellsToggle;
    // End of variables declaration//GEN-END:variables

    
    /**

    Loads a list of spells from the D&D 5e API and saves them to a local file in JSON format.
    */
    
private void loadSpells() {
    try {
        // Specify the URL of the API endpoint
        URL url = new URL("https://www.dnd5eapi.co/api/spells/");

        // Open a connection to the API endpoint
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        // Read the API response into a string
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        StringBuilder response = new StringBuilder();
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Write the JSON response to a file
        File file = new File("classes/InternalData/spells.json");
        FileWriter writer = new FileWriter(file);
        writer.write(response.toString());
        writer.close();

        // Close the connection
        connection.disconnect();
    } catch (Exception e) {
        e.printStackTrace();
    }
}



}

  

        
    

    
