/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Frames;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.DefaultListModel;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**

A GUI screen that displays a list of spells parsed from a JSON file.

Implements the Extendable interface.

*/
public class SpellsScreen extends javax.swing.JInternalFrame implements Extendable {

    public DefaultListModel<String> spellListModel;
    private final JDesktopPane desktopPane;

    /**

    Creates a new SpellsScreen object.

    @param desktopPane The desktop pane on which this screen will be displayed.

    @throws IOException if there is an error reading the JSON file.

    @throws FileNotFoundException if the JSON file is not found.

    @throws ParseException if there is an error parsing the JSON file.
    */
    
    public SpellsScreen(JDesktopPane desktopPane) throws IOException, FileNotFoundException, ParseException {
        
        this.desktopPane = desktopPane;

        initComponents();
        /// Parse the JSON file
        JSONParser parser = new JSONParser();
        JSONObject jsonObject = new org.json.JSONObject(new JSONTokener(new FileReader("classes\\InternalData\\spells.json")));


        // Get the array of spells
        JSONArray spellsArray = (JSONArray) jsonObject.get("results");

        // Create a default list model to hold the spell names
        DefaultListModel<String> spellModel = new DefaultListModel<>();

        // Loop through the array of spells and add each name to the list model
        for (Object spellObj : spellsArray) {
            JSONObject spellJson = (JSONObject) spellObj;
            String spellName = (String) spellJson.get("name");
            spellModel.addElement(spellName);
        }
        spellList.setModel(spellModel);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        spellList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        spellDisplay = new javax.swing.JTextPane();
        extendButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        spellSearch = new javax.swing.JTextField();

        jScrollPane2.setViewportView(jEditorPane1);

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        spellList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1", "2", "3", "4" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        spellList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                spellListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(spellList);

        spellDisplay.setContentType("text/html"); // NOI18N
        jScrollPane3.setViewportView(spellDisplay);

        extendButton.setText("Extend");
        extendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extendButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Search for Spell");

        spellSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                spellSearchKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(extendButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spellSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(extendButton)
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spellSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**

    This method is called when the selection in the spellList JList changes. It retrieves the selected spell from the

    D&D 5e API and displays its information in the spellDisplay JTextPane.

    @param evt the ListSelectionEvent that triggered the method call
    */
    private void spellListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_spellListValueChanged
        // get selected spell
        String selectedSpell = spellList.getSelectedValue();
        System.out.println(selectedSpell);
        // look it up in the api
        if (selectedSpell != null) {
         selectedSpell = selectedSpell.replaceAll(" ", "-").toLowerCase();
         String apiUrl = "https://www.dnd5eapi.co/api/spells/" + selectedSpell;
         try {
             URL url = new URL(apiUrl);
             HttpURLConnection conn = (HttpURLConnection) url.openConnection();
             conn.setRequestMethod("GET");
             BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
             StringBuilder result = new StringBuilder();
             String line;
             while ((line = reader.readLine()) != null) {
                 result.append(line);
             }
             reader.close();

             String resultString = result.toString();

        // Parse the JSON string to a JsonObject
        JsonParser parser = new JsonParser();
        JsonObject spellJson = parser.parse(resultString).getAsJsonObject();

        StringBuilder formattedResult = new StringBuilder();

        // Extract the spell information
        String name = spellJson.get("name").getAsString();
        String desc = spellJson.get("desc").getAsJsonArray().toString();
        String range = spellJson.get("range").getAsString();
        String components = spellJson.get("components").getAsJsonArray().toString();
        String duration = spellJson.get("duration").getAsString();
        String castingTime = spellJson.get("casting_time").getAsString();
        int level = spellJson.get("level").getAsInt();
        // Build the formatted text
        // Format the spell information with labels
        formattedResult.append("<html>");
        formattedResult.append("<b>Name:</b> ").append(name).append("<br>");
        formattedResult.append("<b>Description:</b> ").append(desc).append("<br>");
        formattedResult.append("<b>Range:</b> ").append(range).append("<br>");
        formattedResult.append("<b>Components:</b> ").append(components).append("<br>");
        formattedResult.append("<b>Duration:</b> ").append(duration).append("<br>");
        formattedResult.append("<b>Casting Time:</b> ").append(castingTime).append("<br>");
        formattedResult.append("<b>Level:</b> ").append(level).append("<br>");
        formattedResult.append("</html>");

        // Set the text of the spellDisplay JTextPane
        spellDisplay.setText(formattedResult.toString());


             System.out.println("Spell found!");

             // Create the formatted text


             // Set the text of the spellDisplay JTextPane

             System.out.println("Displayed");

         } catch (IOException | JSONException e) {
             // Handle any exceptions
         }
        }
    }//GEN-LAST:event_spellListValueChanged

    
    
    private void extendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extendButtonActionPerformed
        JEditorPane display = new JEditorPane();
        // Set the content type to HTML
        display.setContentType("text/html"); 
        // Add the HTML content
        display.setText(spellDisplay.getText()); 

        // Make the editor pane read-only
        display.setEditable(false); 
        Extendable extendable = new Extendable(){
        
        };
        // Pass the desktop pane object
        extendable.createNewInternalFrameHTML(display, desktopPane); 
    }//GEN-LAST:event_extendButtonActionPerformed

    private void spellSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spellSearchKeyTyped
    String searchText = spellSearch.getText(); // get the text from the search field
    DefaultListModel<String> model = (DefaultListModel<String>) spellList.getModel(); // get the model for the spell list
    
    // loop through each item in the model
    for (int i = 0; i < model.size(); i++) {
        String item = model.getElementAt(i);
        
        // if the item contains the search text, select it in the list and scroll to it
        if (item.toLowerCase().contains(searchText.toLowerCase())) {
            spellList.setSelectedIndex(i);
            spellList.ensureIndexIsVisible(i);
            return;
        }
    }
    }//GEN-LAST:event_spellSearchKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton extendButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane spellDisplay;
    private javax.swing.JList<String> spellList;
    private javax.swing.JTextField spellSearch;
    // End of variables declaration//GEN-END:variables

}